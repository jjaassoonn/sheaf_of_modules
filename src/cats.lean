import topology.sheaves.sheaf
import topology.category.Top.opens
import algebra.category.CommRing
import algebra.category.Group
import algebra.category.Module.basic

open category_theory Top topological_space opposite


-- class PreSheafOfModules.core (X : Top) :=
-- (ùí™ : sheaf CommRing X)
-- (‚Ñ± : presheaf Ab X)

-- class PreSheafOfModules (X : Top) extends PreSheafOfModules.core X :=
-- [is_module : Œ† (U : opens X), module (ùí™.1.obj (op U)) (‚Ñ±.obj (op U))]
-- [res_add : Œ† (U V : opens X) (h : (op U) ‚ü∂ (op V)) (a b : ‚Ñ±.obj (op U)), ‚Ñ±.map h (a + b) = ‚Ñ±.map h a + ‚Ñ±.map h b]
-- [res_scalar : Œ† (U V : opens X) (h : (op U) ‚ü∂ (op V)) (r : ùí™.1.obj (op U)) (a: ‚Ñ±.obj (op U)), ‚Ñ±.map h (r ‚Ä¢ a) = ùí™.1.map h r ‚Ä¢ ‚Ñ±.map h a]


-- class SheafOfModules (X : Top) extends PreSheafOfModules X :=
-- (is_sheaf : presheaf.is_sheaf ‚Ñ±)


structure BundledModule :=
(R : CommRing)
(M : Module R.Œ±)

@[reducible] instance restriction_of_scalar.bu
{M1 M2 : BundledModule} (f : M1.R ‚ü∂ M2.R) : has_scalar M1.R M2.M :=
{ smul := Œª r m, f r ‚Ä¢ m }

instance restriction_of_scalar.mul_action
{M1 M2 : BundledModule} (f : M1.R ‚ü∂ M2.R) : mul_action M1.R M2.M :=
{ one_smul := Œª m, begin
    unfold has_scalar.smul,
    rw [ring_hom.map_one, one_smul],
  end,
  mul_smul := Œª r r' m, begin
    unfold has_scalar.smul,
    rw [ring_hom.map_mul, mul_smul],
  end,
  ..(restriction_of_scalar.bu f) }

instance restriction_of_scalar.distrib_mul_action
{M1 M2 : BundledModule} (f : M1.R ‚ü∂ M2.R) : distrib_mul_action M1.R M2.M :=
{ smul_add := Œª r2 r1 m, begin
    unfold has_scalar.smul,
    rw [smul_add],
  end,
  smul_zero := Œª m, begin
    unfold has_scalar.smul,
    rw [smul_zero],
  end,
  ..(restriction_of_scalar.mul_action f)}

def restriction_of_scalar.M {M1 M2 : BundledModule} (f : M1.R ‚ü∂ M2.R) : Module M1.R :=
{ carrier := M2.M,
  is_module :=
    { add_smul := Œª r r' m, begin
        unfold has_scalar.smul,
        rw [ring_hom.map_add, add_smul],
      end,
      smul_zero := Œª m, begin
        unfold has_scalar.smul,
        rw [smul_zero],
      end,
      zero_smul := Œª m, begin
        unfold has_scalar.smul,
        rw [ring_hom.map_zero, zero_smul],
      end,
      ..(restriction_of_scalar.distrib_mul_action f) } }

def restriction_of_scalar.M_as {M1 M2 : BundledModule} {f : M1.R ‚ü∂ M2.R} :
  restriction_of_scalar.M f ‚Üí M2.M := Œª m, m

def restriction_of_scalar.as_restriction  {M1 M2 : BundledModule} {f : M1.R ‚ü∂ M2.R} :
  M2.M ‚Üí restriction_of_scalar.M f := Œª m, m

open restriction_of_scalar

@[simp] lemma restriction_of_scalar.smul_def {M1 M2 : BundledModule} (f : M1.R ‚ü∂ M2.R)
  (r : M1.R) (m : restriction_of_scalar.M f) :
  (r ‚Ä¢ m) = as_restriction (f r ‚Ä¢ M_as m) := rfl

def restriction_of_scalar {M1 M2 : BundledModule} (f : M1.R ‚ü∂ M2.R) : BundledModule :=
{ R := M1.R,
  M := restriction_of_scalar.M f, }

def bundledMap (M1 M2 : BundledModule) : Type* :=
Œ£ (f : M1.R ‚ü∂ M2.R), M1.M ‚ü∂ restriction_of_scalar.M f

instance BundledModule.is_cat : category BundledModule :=
{ hom := Œª M1 M2, bundledMap M1 M2,
  id := Œª M, ‚ü®ùüô M.R, { to_fun := Œª m, m,
                       map_add' := Œª _ _, rfl,
                       map_smul' := Œª _ _, rfl }‚ü©,
  comp := Œª M1 M2 M3 f g, ‚ü®f.1 ‚â´ g.1, { to_fun := Œª m, g.2 (f.2 m),
                                         map_add' := Œª m1 m2, by simp only [linear_map.map_add],
                                         map_smul' := Œª r m, begin
                                           rcases f with ‚ü®f, f'‚ü©,
                                           rcases g with ‚ü®g, g'‚ü©,
                                           rw [ring_hom.id_apply, linear_map.map_smul‚Çõ‚Çó, ring_hom.id_apply, restriction_of_scalar.smul_def,
                                            restriction_of_scalar.smul_def, comp_apply, as_restriction, as_restriction, M_as, M_as,
                                            linear_map.map_smul, restriction_of_scalar.smul_def, as_restriction, M_as],
                                         end }‚ü©,
  comp_id' := Œª M1 M2 f, begin
    ext, refl, rw heq_iff_eq, ext, refl,
  end,
  id_comp' := Œª M1 M2 f, begin
    ext, refl, rw heq_iff_eq, ext, refl,
  end }

def BundledModule.forget : @category_theory.functor BundledModule BundledModule.is_cat CommRing _ :=
{ obj := Œª M, M.R,
  map := Œª M1 M2 f, f.1 }
