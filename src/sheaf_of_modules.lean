import topology.sheaves.sheaf
import topology.category.Top.opens
import algebra.category.CommRing
import cats

open category_theory Top topological_space opposite

structure PresheafOfModules1 (X : Top) :=
(ùí™ : presheaf CommRing X) 
(‚Ñ± : presheaf AddCommGroup X)
[is_module : Œ† (U : (opens X)·µí·µñ), module (ùí™.obj U) (‚Ñ±.obj U)]
(res_compatible : Œ† (U V : (opens X)·µí·µñ) (h : U ‚ü∂ V) (r : ùí™.obj U) (a: ‚Ñ±.obj U),
  ‚Ñ±.map h (r ‚Ä¢ a) = ùí™.map h r ‚Ä¢ ‚Ñ±.map h a)

-- Now I believe this is not the correct definition, because for `h : U ‚ü∂ V`, `‚Ñ±.map h` is only an `AddCommGroup`-map not a `Module`-map


open restriction_of_scalar

/--
This is a presheaf of Modules over ‚Ñ± ‚ãô BundledModule.forget

If `h : U ‚äÜ V`, then `‚Ñ±.map h` is a pair `‚ü®res‚ÇÅ, res‚ÇÇ‚ü©`, and `res‚ÇÅ` is the restriction map of sheaf of ring while `res‚ÇÇ` is the restriction map of sheaf of module.
-/

class PresheafOfModules2 {X : Top} (‚Ñ± : @presheaf BundledModule BundledModule.is_cat X):=
(res_compatible : Œ† (U V : (opens X)·µí·µñ) (h : U ‚ü∂ V) (r : (‚Ñ±.obj U).R) (m : (‚Ñ±.obj U).M), (‚Ñ±.map h).2 (r ‚Ä¢ m) = (r ‚Ä¢ (‚Ñ±.map h).2 m))

open ulift

@[reducible] instance int_as_cring.has_add : has_add (ulift ‚Ñ§) :=
‚ü®Œª x y, up (down x + down y)‚ü©

@[simp] lemma int_as_cring.add_def (x y : ‚Ñ§) : (up x) + (up y) = up (x + y) := rfl

@[reducible] instance int_as_cring.has_neg : has_neg (ulift ‚Ñ§) :=
‚ü®Œª x, up (- down x)‚ü©

@[simp] lemma int_as_cring.neg_def (z : ‚Ñ§) : -(up z) = up (- z) := rfl

@[reducible] instance int_as_cring.has_mul : has_mul (ulift ‚Ñ§) :=
‚ü®Œª x y, up (down x * down y)‚ü©

@[simp] lemma int_as_cring.mul_def (x y : ‚Ñ§) : up x * up y = up (x * y) := rfl

def int_as_cring : CommRing :=
{ Œ± := ulift ‚Ñ§,
  str := { add_assoc := Œª a b c, begin
             cases a, cases b, cases c,
             dsimp only, rw add_assoc,
           end,

           zero := up 0,
           add_zero := Œª a, begin
             cases a,
             dsimp only, rw add_zero,
           end,
           zero_add := Œª a, begin
             cases a, dsimp only, rw zero_add,
           end,

           neg := Œª r, up (- down r),
           add_left_neg := Œª a, 
           begin
             cases a, rw [int_as_cring.neg_def, int_as_cring.add_def, int.add_left_neg], 
             refl,
           end,

           add_comm := Œª x y, begin
             cases x, cases y,
             rw [int_as_cring.add_def, add_comm, int_as_cring.add_def],
           end,

           mul_assoc := Œª x y z, begin 
             cases x, cases y, cases z,
             rw [int_as_cring.mul_def, int_as_cring.mul_def, mul_assoc],
           end,
           mul_comm := Œª x y, begin
             cases x, cases y,
             rw [int_as_cring.mul_def, mul_comm, int_as_cring.mul_def],
           end,

           one := up 1,
           one_mul := Œª a, begin
             cases a, rw [int_as_cring.mul_def, one_mul],
           end,
           mul_one := Œª a, begin
             cases a, rw [int_as_cring.mul_def, mul_one],
           end,

           left_distrib := Œª a b c, begin
             cases a, cases b, cases c,
             rw [int_as_cring.add_def, int_as_cring.mul_def, mul_add],
           end,
           right_distrib := Œª a b c, begin
             cases a, cases b, cases c,
             rw [int_as_cring.add_def, int_as_cring.mul_def, add_mul],
           end,
           ..(int_as_cring.has_add),
           ..(int_as_cring.has_neg),
           ..(int_as_cring.has_mul) } }

@[simp] lemma lift_int.add_down (x y : int_as_cring) : (x + y).down = x.down + y.down := rfl
@[simp] lemma lift_int.zero_down : (0 : int_as_cring).down = 0 := rfl

instance int_as_cring.distrib_mul_action (A : AddCommGroup) : distrib_mul_action (int_as_cring) A :=
{ smul := Œª x y, x.1 ‚Ä¢ y,
  one_smul := Œª x, by erw one_zsmul,
  mul_smul := Œª x y r, begin 
    cases x, cases y,
    rw [int_as_cring.mul_def, mul_zsmul],
  end,
  smul_add := Œª r x y, by rw zsmul_add,
  smul_zero := Œª r, by rw zsmul_zero }

@[simp] lemma lift_int.zsmul (A : AddCommGroup) (r : int_as_cring) (a : A) : r ‚Ä¢ a = r.1 ‚Ä¢ a := rfl

instance is_int_module (A : AddCommGroup) : module int_as_cring A :=
{ add_smul := Œª x y r, begin
    cases x, cases y,
    unfold has_scalar.smul,
    simp only [zsmul_eq_smul],
    rw [lift_int.add_down], dsimp only, rw add_smul,
  end,
  zero_smul := Œª x, begin
    unfold has_scalar.smul,
    simp only [zsmul_eq_smul],
    rw [lift_int.zero_down, zero_smul],
  end}

def as_int_module (A : AddCommGroup) : module ‚Ñ§ A := by apply_instance

-- @[reducible] def psh_m {X : Top} (ùí™ : presheaf AddCommGroup X) :
--   @presheaf BundledModule BundledModule.is_cat X :=
-- { obj := Œª U, { R := int_as_cring, M := { carrier := ùí™.obj U, is_module := is_int_module (ùí™.obj U)} },
--   map := Œª U V h,
--     ‚ü®ùüô _, { to_fun := Œª m, ùí™.map h m,
--             map_add' := Œª x y, by rw add_monoid_hom.map_add,
--             map_smul' := Œª r m, begin
--             dsimp only at *,
--             rw [ring_hom.id_apply],
--             erw add_monoid_hom.map_zsmul,
--             erw [lift_int.zsmul],
--           end }‚ü© }


-- instance {X : Top} (ùí™ : presheaf AddCommGroup X) :
--   (PresheafOfModules2 (psh_m ùí™)) :=
-- { res_compatible := Œª U V h r m, begin
--     dsimp only,
--     erw [smul_def', id_apply, add_monoid_hom.map_zsmul, lift_int.zsmul],
--   end }

example (X : Top) (‚Ñ± : @presheaf BundledModule BundledModule.is_cat X) [PresheafOfModules2 ‚Ñ±]: PresheafOfModules1 X :=
{ ùí™ := { obj := Œª U, (‚Ñ±.obj U).R,
         map := Œª _ _ h, (‚Ñ±.map h).1 },
  ‚Ñ± :=
    { obj := Œª U, AddCommGroup.of (‚Ñ±.obj U).M,
      map := Œª U V h, @AddCommGroup.of_hom (AddCommGroup.of (‚Ñ±.obj U).M) (AddCommGroup.of (‚Ñ±.obj V).M) _ _
        { to_fun := (‚Ñ±.map h).2,
          map_zero' :=  linear_map.map_zero _,
          map_add' := Œª m m', begin
            -- rw linear_map.map_add,
            sorry,
          end, }, },
  is_module := Œª U, begin
    dsimp only [AddCommGroup.coe_of], apply_instance,
  end,
  res_compatible := Œª U V h r m, begin
    dsimp only [AddCommGroup.coe_of, linear_map.map_zero, functor.map_comp, functor.map_id] at *,
    erw PresheafOfModules2.res_compatible U V h r m,
    erw [smul_def'],
  end}

@[reducible] def convert_to2 (X : Top) (psofm : PresheafOfModules1 X) : @presheaf BundledModule BundledModule.is_cat X :=
{ obj := Œª U,{ R := psofm.ùí™.obj U,
               M := { carrier := psofm.‚Ñ±.obj U,
               is_module := psofm.is_module U } },
  map := Œª U V h, ‚ü®psofm.ùí™.map h,
        { to_fun := Œª m, psofm.‚Ñ±.map h m,
          map_add' := Œª m m', begin
            dsimp only at *,
            simp only [add_monoid_hom.map_add],
          end,
          map_smul' := Œª r m, begin
            dsimp only at *,
            rw [ring_hom.id_apply, psofm.res_compatible _ _ h],
            -- erw (smul_def' (psofm.ùí™.map h) r { carrier := psofm.‚Ñ±.obj V,
            --    is_module := psofm.is_module V } (psofm.‚Ñ±.map h m)).symm,

            sorry,
          end}‚ü© }

instance (X : Top) (psofm : PresheafOfModules1 X) : PresheafOfModules2 (convert_to2 X psofm) :=
{ res_compatible := Œª U V h r m, begin
  dsimp only [convert_to2] at *,
  rw smul_def',
  erw psofm.res_compatible, refl,
end }